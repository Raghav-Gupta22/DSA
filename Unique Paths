Problem link: https://leetcode.com/problems/unique-paths/

------------------------------------------------------------//combinatorics formula (m+n-2)! / (m-1!*n-1!)
public int uniquePaths(int m, int n) {
        m--; n--;
        long ret=1;
        for (int i=1; i<=Math.min(m, n); i++) {
            ret = ret * (m+n+1-i)/i;
        }
        return (int)ret;
        
        
----------------------------------------------------------RECURSIVE WILL GIVE TLE    
public class Solution {
    public int recur(int i, int j, int m, int n){
        
        if(i>=m || j>=n) return 0;
        if(i==m-1 && j==n-1) return 1;
        else 
            return recur(i+1,j, m, n) + recur(i,j+1, m, n);
    }
    
    public int uniquePaths(int m, int n) {
        //RECURSIVE()
        return recur(0,0,m,n);
    }
}

-------------------------------------------------------DP memoization code
public class Solution {
    public int recur(int i, int j, int m, int n, int [][] dp){
        if(i>=m || j>=n) return 0;
        if(i==m-1 && j==n-1) return 1;
        if (dp[i][j]!=-1) return dp[i][j];
        else 
            return dp[i][j]= recur(i+1,j, m, n,dp) + recur(i,j+1, m, n,dp);
    }
    
    public int uniquePaths(int m, int n) {
        if(m==1 && n==1) return 1;
        int [][]dp=new int[m][n];
        for(int[] i: dp)
        Arrays.fill(i,-1);
        recur(0,0,m,n,dp);
        // System.out.println(Arrays.deepToString(dp));
        return dp[0][0];
    }
}
