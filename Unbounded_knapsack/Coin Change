Problem Link: https://leetcode.com/problems/coin-change/

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        #TABULATION
        dp=[[0]*(amount+1) for i in range(len(coins)+1)]
        
        for i in range(len(coins)+1):
            for j in range(amount+1):
                if i==0:
                    dp[i][j]=math.inf
                elif i==1:
                    if j%coins[i-1]==0:
                        dp[i][j]= j//coins[0]
                    else:
                        dp[i][j]=math.inf
                else:
                    if coins[i-1] <= j:
                        dp[i][j]=min(1+dp[i][j-coins[i-1]], dp[i-1][j])
                    else:
                        dp[i][j]=dp[i-1][j]
        if dp[len(coins)][(amount)]==math.inf:
            return -1
        return dp[len(coins)][(amount)]
    
        #BFS
        queue=deque()
        queue.append([amount,0])
        visited=set([amount])

        while queue:
            k,count=queue.popleft()
            if k==0:
                return count
            for i in range(len(coins)):
                if k-coins[i] not in visited and k-coins[i]>=0:
                    queue.append([k-coins[i],count+1])
                    visited.add(k-coins[i])
        return -1
