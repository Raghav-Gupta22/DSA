Problem Link: https://practice.geeksforgeeks.org/problems/rod-cutting0840/1/


#--------------------------------Recursive Solution
from functools import lru_cache
class Solution:
    def cutRod(self, price, n):
        #code here
        
        length=[i for i in range(1,n+1)]
        @lru_cache(None)
        def solve(l,n):
    
            if l==0 or n==0:
                return 0
            
            if length[n-1]<=l:
                return max((solve(l-length[n-1],n)+price[n-1]),solve(l,n-1))
            else:
                return solve(l,n-1)
        
        return(solve(n,len(length)))
        
#----------------------------------RECURSION WITH MEMOIZATION
class Solution:
    def cutRod(self, price, n):
        #code here
        length=[i for i in range(1,n+1)]
        dp=[[-1]*(n+1) for i in range(len(price)+1)]
        def solve(l,n):
    
            if l==0 or n==0:
                return 0
            
            if dp[l][n] !=-1:
                return dp[l][n]
            if length[n-1]<=l:
                dp[l][n]=max((solve(l-length[n-1],n)+price[n-1]),solve(l,n-1))
                return dp[l][n]
            else:
                dp[l][n]= solve(l,n-1)
                return dp[l][n]
        
        return(solve(n,len(length)))
