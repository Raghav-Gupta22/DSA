Problem Link: https://leetcode.com/problems/path-with-minimum-effort/

#BFS with Queue (GIVING TLE)
class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        #BFS (GIVING TLE)
        rows=len(heights)
        cols=len(heights[0])
        minHeap=[]
        ans=math.inf
        visited=set()
        if rows==cols==1:
            return 0
        if rows>1:
            heappush(minHeap,([abs(heights[0][0] - heights[1][0]),1,0]))
        
        if cols>1:
            heappush(minHeap,([abs(heights[0][0] - heights[0][1]),0,1]))
            
        while minHeap:
            time,x,y =heappop(minHeap)
            if x==rows-1 and y==cols-1:
                ans=min(ans,time)
            if (x , y) not in visited:
                visited.add((x,y))
                
                if x-1>=0:
                    heappush(minHeap,([max(time,abs(heights[x][y] - heights[x-1][y])),x-1,y]))

                if x+1<rows:
                    heappush(minHeap,([max(time,abs(heights[x][y] - heights[x+1][y])),x+1,y]))

                if y-1>=0:
                    heappush(minHeap,([max(time,abs(heights[x][y] - heights[x][y-1])),x,y-1]))

                if y+1<cols:
                    heappush(minHeap,([max(time,abs(heights[x][y] - heights[x][y+1])),x,y+1]))
                
        return ans

----------------------------------------------------------------------------------------------------------
#BFS with Heap
rows=len(heights)
cols=len(heights[0])
minHeap=[]
ans=math.inf
visited=set()
if rows==cols==1:
    return 0
if rows>1:
    heappush(minHeap,([abs(heights[0][0] - heights[1][0]),1,0]))

if cols>1:
    heappush(minHeap,([abs(heights[0][0] - heights[0][1]),0,1]))

while minHeap:
    time,x,y =heappop(minHeap)
    if x==rows-1 and y==cols-1:
        ans=min(ans,time)
    if (x , y) not in visited:
        visited.add((x,y))

        if x-1>=0:
            heappush(minHeap,([max(time,abs(heights[x][y] - heights[x-1][y])),x-1,y]))

        if x+1<rows:
            heappush(minHeap,([max(time,abs(heights[x][y] - heights[x+1][y])),x+1,y]))

        if y-1>=0:
            heappush(minHeap,([max(time,abs(heights[x][y] - heights[x][y-1])),x,y-1]))

        if y+1<cols:
            heappush(minHeap,([max(time,abs(heights[x][y] - heights[x][y+1])),x,y+1]))

return ans
